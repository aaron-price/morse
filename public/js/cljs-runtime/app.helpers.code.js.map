{"version":3,"sources":["app/helpers/code.cljs"],"mappings":"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","names":["p__37101","map__37103","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.helpers.code/handle-char-end","chars","syms","acc","new-chars","cljs.core.conj","new-syms","cljs.core/empty?","cljs.core.assoc","p__37109","map__37121","app.helpers.code/handle-word-end","words","new-words","p__37126","map__37128","app.helpers.code/handle-sym-enter","curr","app.helpers.code/finalize-split","cljs.core.prn","app.helpers.code/split-code","code","cljs.core.reduce","p__37133","map__37134","G__37139","app.helpers.code/syms->text","app.db/chart","clojure.set/map-invert","app.helpers.code/chars->text","sym-groups","cljs.core.map","clojure.string.join","app.helpers.code/code->text","ast","_","syms-text","chars-text"],"sourcesContent":["(ns app.helpers.code\n  (:require\n    [app.db :refer [chart]]\n    [clojure.set :refer [map-invert]]\n  ))\n\n;;; @TODO I know longer have any clue what this code does.\n;;; Either I am too close to it, or it truly is nonsense \n;;; And needs to be destroyed.\n\n(defn handle-char-end [{:keys [chars syms] :as acc}]\n  \"Take all the syms, wrap in a vector, and move to :chars\"\n  (let [new-chars (conj chars syms)\n        new-syms []]\n    (if-not (empty? syms)\n      (-> acc\n          (assoc :chars new-chars)\n          (assoc :syms new-syms))\n      acc)))\n\n(defn handle-word-end [{:keys [chars words] :as acc}]\n  \"Take all the chars, and move to :words\"\n  (let [new-words (conj words chars)\n        new-chars []]\n    (if-not (empty? chars)\n      (-> acc\n          (assoc :words new-words)\n          (assoc :chars new-chars))\n      acc)))\n\n(defn handle-sym-enter [{:keys [syms] :as acc} curr]\n  \"Add curr to syms. That's all.\"\n  (let [new-syms (conj syms curr)]\n       (assoc acc :syms new-syms)))\n\n(defn finalize-split [acc]\n  \"pass any leftover syms into chars. Chars into words. And return words\"\n  (prn \"acc\" acc)\n  (-> acc\n      handle-char-end\n      handle-word-end\n      (get :words)))\n\n\n(defn split-code [code]\n  (->> code\n    (reduce\n      (fn [{:keys [syms chars words] :as acc} curr]\n        (prn \"CUR\" curr \", ACHOO\" acc)\n        (case curr\n          \"/\"   (handle-char-end acc)\n          \"///\" (handle-word-end acc)\n          (handle-sym-enter acc curr)))\n      {:words []\n       :chars []\n       :syms  []}) \n    ;finalize-split\n    ))\n\n(defn syms->text [code]\n  \"In theory this should be just enough syms for one character.\"\n  (-> chart        ; {\"A\" [\".\" \"-\"] ...}\n      map-invert   ; {[\".\" \"-\"] \"A\" ...}\n      (get code))) ; (get [\".\" \"-\"]) => \"A\"\n\n(defn chars->text [sym-groups]\n  (->\n    (map\n      syms->text\n      sym-groups)\n    clojure.string/join))\n\n(defn code->text [code]\n  (let [ast (split-code code)\n        _ (prn \"AST\" ast)\n        syms-text (syms->text (:syms ast))\n        chars-text (chars->text (:chars ast))\n        _ (prn \"stext\" syms-text)\n        _ (prn \"ctext\" chars-text)\n        ]\n    (str chars-text syms-text)))\n\n(comment\n  \n  ; Test code->text\n  (= \"A\" (code->text [\".\" \"-\"]))\n  (= \"AA\" (code->text [\".\" \"-\" \"/\" \".\" \"-\"]))\n  (= \"A A\" (code->text [\".\" \"-\" \"///\" \".\" \"-\"]))\n  (=\n   {:words [] :chars [[\".\"] [\".\" \"-\"]] :syms []}\n   (handle-char-end \n    {:words [] :chars [[\".\"]] :syms [\".\" \"-\"]}))\n\n  (= [[[\".\" \"-\"] [\".\" \"-\"]]] (split-code [\".\" \"-\" \"/\" \".\" \"-\" \"/\"]))\n\n)\n"]}