{"version":3,"sources":["app/reg/subs/log_morse_code.cljs"],"mappings":";AAQA,AAAA,AAACA,AAEC,AAAAC,AAAwBQ;AAAxB,AAAA,AAAAP,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAAD,AAAAJ,AAAA,AAAiBM;AAAjB,AACE,AAACE,AAAUF,AAAKD;;AAEpB,AAAA,AAACP,AAEC,AAAAW,AAAwBF;AAAxB,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAT,AAAA,AAAAS,AAAA,AAAA,AAAA,AAAA,AAAAR,AAAAC,AAAAO,AAAAA;AAAA,AAAAN,AAAAM,AAAA,AAAaL;AAAb,AAAAD,AAAAM,AAAA,AAAiBJ;AAAjB,AACOD,AACAM,AACA,AAAA,AAACH,AAAUF;;AAEpB,AAAA,AAAMM,AAAYC;AAAlB,AACE,AAACC,AACC,AAAKC,AAAIC;AAAT,AACE,AAAGD,AACA,AAAA,AAAA,AAAA,AAAA,AAAOC;AAAP;;AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOD;AAAP;;AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAAI,AAAAF;AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOD;AAAP;;AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAAK,AAAAH;AAAA,AAAAC,AAAAE;AAAA,AAAA,AAAA,AAAAF,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAOD;AAAP;;AAAA,AAAA,AAAAC;;;AAAA,AAAA,AAAAM,AAAAJ;AAAA,AAAAC,AAAAG;AAAA,AAAA,AAAA,AAAAH,AAAAH;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAOH;;AAAP,AAAAI;;;AAAA,AAAA,AAAAG;;;;AAAA,AAAAH;;;AAAA,AAAA,AAAAE;;;;AAAA,AAAAF;;;AAAA,AAAA,AAAAC;;;;AAAA,AAAAD;;;AAAA,AAAA,AAAAF;;;;AAHP,AASEL;;AAEJ,AAAA,AAAMW,AAAaC;AAAnB,AACE,AACE,AAAA,AAAGA;AADL;;AAAA,AAEQ,AAAA,AAAGA;;;;AAEb,AAAA,AAAC3B,AAEC,AAAA4B,AAAwBnB;AAAxB,AAAA,AAAAoB,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAAzB,AAAAC,AAAAwB,AAAAA;AAAA,AAAAvB,AAAAuB,AAAA,AAAarB;AAAb,AAAAF,AAAAuB,AAAA,AAAkBtB;AAAlB,AACE,AAAMuB,AAAK,AAAA,AAAKvB,AACAM,AACA,AAAA,AAACH,AAAUF,AACXM,AACAY;AAJhB,AAKEI","names":["re_frame.core.reg_sub","p__33759","map__33761","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","log","unit","_","app.helpers.parse/parse-log","p__33764","map__33765","app.helpers.predict/predict-log","app.reg.subs.log-morse-code/count-code","code","cljs.core.reduce","acc","sym","cljs.core.match/backtrack","e33793","js/Error","e__31919__auto__","e33795","e33797","e33800","app.reg.subs.log-morse-code/size-offset","num-units","p__33817","map__33819","size"],"sourcesContent":["(ns app.reg.subs.log-morse-code\n  (:require\n    [app.helpers.parse :refer [parse-log]]\n    [cljs.core.match :refer [match]]\n    [app.helpers.predict :refer [predict-log]]\n    [re-frame.core :refer [reg-sub]]))\n\n\n(reg-sub \n  :log->morse-code \n  (fn [{:keys [log unit]} _]\n    (parse-log unit log)))\n\n(reg-sub \n  :predict->morse-code \n  (fn [{:keys [log unit]} _]\n    (->> log\n         predict-log\n         (parse-log unit))))\n\n(defn count-code [code]\n  (reduce\n    (fn [acc sym]\n      (+ acc\n         (match sym\n                \".\" 1\n                \"-\" 3\n                \"charspace\" 1\n                \"wordspace\" 7)))\n    0\n    code))\n\n(defn size-offset [num-units]\n  (cond\n    (< num-units 15) 0\n    :else (- num-units 15)))\n\n(reg-sub\n  :log-size\n  (fn [{:keys [unit log]} _]\n    (let [size (->> log\n                    predict-log\n                    (parse-log unit)\n                    count-code\n                    size-offset)]\n      size)))\n"]}