{"version":3,"sources":["app/helpers/parser_test.cljs"],"mappings":"","names":[],"sourcesContent":["(ns app.helpers.parser-test\n  (:require [cljs.test :refer [deftest is]]\n            [app.helpers.parser :as p]))\n\n;(def unit 100)\n;(def c1 {:type :down :time 0})\n;(def c2 {:type :up   :time 100})\n;(def c3 {:type :down :time 200})\n;(def c4 {:type :up   :time 500})\n;(def c5 {:type :down :time 800})\n;(def c6 {:type :up   :time 1800})\n;(def c7 {:type :tick :time 2800})\n;(def log1 [c1 c2 c3 c4 c5 c6 c7])\n;\n;\n;(deftest infer-value\n;  (is (= (p/infer-value unit c1 c2) :.))\n;  (is (= (p/infer-value unit c2 c3) :sym))\n;  (is (= (p/infer-value unit c3 c4) :-))\n;  (is (= (p/infer-value unit c4 c5) :char))\n;  (is (= (p/infer-value unit c5 c6) :-))\n;  (is (= (p/infer-value unit c6 c7) :word))\n;)\n;\n;(def inflog (p/infer-log unit log1))\n;\n;(deftest infer-log\n;  (is (= inflog\n;         [{:type :down, :time 0,    :value :.} \n;          {:type :up,   :time 100,  :value :sym} \n;          {:type :down, :time 200,  :value :-} \n;          {:type :up,   :time 500,  :value :char} \n;          {:type :down, :time 800,  :value :-} \n;          {:type :up,   :time 1800, :value :word} \n;          {:type :tick, :time 2800, :value :pending}\n;         ]))\n;  )\n;\n;(def morse-code (p/inflog->morse-code inflog))\n;\n;(deftest inflog->morse-code\n;  (is (= morse-code\n;         [:. :- :char :- :word :pending])))\n;\n;\n;; Say THAT 10 times fast\n;(def morse-code-groups (p/morse-code->mcg morse-code))\n;(def morse-code-groups2 (p/morse-code->mcg [:. :- :char :- :. :. :. :char]))\n;\n;(deftest mcg\n;  (is (= morse-code-groups '([:. :-] [:-] [:space])))\n;  (is (= morse-code-groups2 '([:. :-] [:- :. :. :.]))\n;  ))\n;\n;(def morse-text1 (p/morse-code-groups->morse-text morse-code-groups))\n;\n;(deftest morse-text\n;  (is (= morse-text1 '([\".\" \"-\"] [\"-\"] [\" \"]))))\n;\n;\n;(def plain-text-vec (p/morse-text->plain-text-vec morse-text1))\n;\n;(deftest text-vec\n;  (is (= plain-text-vec [\"A\" \"T\" \" \"])))\n;\n;; First integration test\n;(deftest log->plain-text\n;  (is (= \"AT \" (p/log->plain-text unit log1))))\n;\n;(deftest log->morse-text\n;  (is (= '([\".\" \"-\"] [\"-\"] [\" \"]) (p/log->morse-text unit log1))))\n;\n;(def sym-vec (p/text-vect->sym-vect plain-text-vec))\n;\n;(deftest text-vect->sym-vect\n;  (is (= sym-vec '([:. :-] [:-] [:space]))))\n;\n;(deftest plain-text->sym-vect\n;  (is (= sym-vec (p/plain-text->sym-vect \"AT \"))))\n;\n;\n;(deftest tick-log-update\n;  (let [\n;    unit 100\n;    log2 [\n;      {:time 0    :type :down}\n;      {:time 50   :type :up}\n;      {:time 150  :type :tick}\n;    ]\n;    exp-inflog [\n;      {:time 0    :type :down :value :.}\n;      {:time 50   :type :up :value :sym}\n;      {:time 150  :type :tick :value :pending}\n;    ]\n;    inflog (p/infer-log unit log2)\n;    exp-morse-code [:. :pending]\n;    morse-code (p/inflog->morse-code inflog)\n;\n;    exp-mcg '([:.])\n;    mcg (p/morse-code->mcg morse-code)\n;  ]\n;  (is (= exp-inflog     inflog))\n;  (is (= exp-morse-code morse-code))\n;  (is (= exp-mcg mcg))\n;  (is (= \"E\" (p/log->plain-text unit log2)))\n;  (is (= '([\".\"]) (p/log->morse-text unit log2)))\n;  ))\n;\n;(deftest morse-text->flat-morse-text\n;  (let [\n;    li1 [ [\".\"] [\" \"] [\".\" \"-\"] ]\n;    li2 [\" \" \" \" \".\" \"-\"]\n;    li3 [\" \" \" \" \".\" \" \" \" \" \"-\" \" \"]\n;  ]\n;    (is (= (p/li2->li1 li1) [\".\" \" \" \".\" \"-\"]))\n;    (is (= (p/li2->li1 li2) li2))\n;    (is (= (p/strip-dupe-space li2) [\".\" \"-\"]))\n;    (is (= (p/strip-dupe-space li3) [\".\" \" \" \"-\" \" \"])) ; [\".\" \" \" \"-\" \" \"]\n;    (is (= (p/strip-dupe-space li3) [\".\" \" \" \"-\" \" \"])) ; [\".\" \" \" \"-\" \" \"]\n;    \n;    \n;  ))\n"]}