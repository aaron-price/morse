{"version":3,"sources":["app/component/challenge.cljs"],"mappings":";AAWA,AAAA,AAAMA,AAAkBC,AAAKC,AAAUC;AAAvC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAES,AAAA,AAAOF,AACXG,AAAeF,AAAUD,AAEzBI,AACAD,AAAeD,AAAS,AAAA,AAAA,AAACG,AAAML;;AAIpC,AAAA,AAAMM,AAAgBN,AAAKC,AAAUC;AAArC,AAAA,AAAA,AAAA;;AAIA,AAAA,AAAMK,AAAaP,AAAKC,AAAUC;AAAlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEKC,AAAeF,AAAUD;AAF9B,AAIyB,AAAA,AAAA,AAACQ;AAJ1B,AAAA,AAAA,AAAA,AAAA,AAKKL,AAAeD;;AAEpB,AAAA,AAAMO,AAAUC,AAAKC;AAArB,AACE,AAAI,AAAI,AAACC,AAAMF,AAAMC;AACnB,AAACE,AAAIH,AAAK,AAAA,AAAKC;;AACf,AAACE,AAAIH,AAAKC;;;AAGd,AAAA,AAAMG,AAAkBC;AAAxB,AACE,AAAA,AAAA,AAACC,AAAgCD;;AACjC;AAAA,AACE,AAAA,AAAAE,AAAMf,AAAU,AAAA,AAAA,AAACqB;AAAjB,AAAAN,AACMO,AAAc,AAAA,AAAA,AAACD;AADrBL,AAEsDM;AAFtDN,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAEcO;AAFd,AAAAH,AAAAJ,AAAA,AAEoBQ;AAFpB,AAAAJ,AAAAJ,AAAA,AAE0BS;AAF1B,AAAAL,AAAAJ,AAAA,AAE0CU;AACpC5B,AAAK,AAACS,AAASkB,AAAgBD;AAHrC,AAIE,AACE,AAAA,AAACG,AAAEJ;AADL,AACwBnB,AAAeN,AAAK4B,AAAU1B;;AADtD,AAEE,AAAA,AAAC2B,AAAEJ;AAFL,AAEqBlB,AAAYP,AAAK4B,AAAU1B;;AAFhD,AAAA,AAGSH,AAAiBC,AAAK4B,AAAU1B","names":["app.component.challenge/render-challenge","spec","chal-code","log-code","app.component.bar/morse-code-bar","app.component.button/default-btn","cljs.core.assoc","app.component.challenge/render-victory","app.component.challenge/render-fail","re-frame.core/dispatch","app.component.challenge/safe-nth","coll","idx","cljs.core/count","cljs.core.nth","app.component.challenge/challenge-master","abnormal-specs","re-frame.core/dispatch-sync","cljs.core/deref","map__38733","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","re_frame.core.subscribe","db-challenge","state","index","challenge-specs","curr-code","cljs.core._EQ_"],"sourcesContent":["(ns app.component.challenge\n  (:require\n    [cljs.spec.alpha :as s]\n    [re-frame.core :refer [subscribe dispatch-sync dispatch]]\n    [app.helpers.parse :refer [parse-spaces count-code]]\n    [app.helpers.interop :refer [get-node]]\n    [app.component.bar :refer [morse-code-bar]]\n    [app.component.button :refer [default-btn]]\n  ))\n\n\n(defn render-challenge [spec chal-code log-code]\n  [:<>\n    [:h3 (:note spec)]\n    [morse-code-bar chal-code spec]\n    [:hr]\n    [default-btn]\n    [morse-code-bar log-code (assoc spec :id \"log-bar\")]\n    ])\n\n\n(defn render-victory [spec chal-code log-code]\n  [:div \"Good job, you did it!\"])\n\n\n(defn render-fail [spec chal-code log-code]\n  [:div \"Hmm that's not quite right.\"\n    [morse-code-bar chal-code spec]\n    [:hr]\n    [:button {:on-click #(dispatch [:reset-challenge])} \"Try Again\"]\n    [morse-code-bar log-code {:failed true}]])\n\n(defn safe-nth [coll idx]\n  (if (<= (count coll) idx)\n    (nth coll (dec idx))\n    (nth coll idx)))\n\n\n(defn challenge-master [abnormal-specs]\n  (dispatch-sync [:init-challenges abnormal-specs])\n  (fn []\n    (let [log-code @(subscribe [:predict->morse-code])\n          db-challenge @(subscribe [:challenge])\n          {:keys [state index challenge-specs curr-code]} db-challenge\n          spec (safe-nth challenge-specs index)]\n      (cond\n        (= state :completed) [render-victory spec curr-code log-code]\n        (= state :failed) [render-fail spec curr-code log-code]\n        :else [render-challenge spec curr-code log-code]))))\n"]}