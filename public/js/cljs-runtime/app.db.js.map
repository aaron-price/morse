{"version":3,"sources":["app/db.cljs"],"mappingstB,AAAA,AAAAE;;;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAE,AAAAH;AAAA,AAEa,AAACI,AAAMP,AAAIC,AAAE,AAACO,AAAI,AAACC,AAAIC,AAAQR;;AAF5C,AAAAI;;;AAAA,AAAA,AAAAF;;;AAFJ,AAMEV;AAEJ,AAAA,AAAA,AAAA,AAAA,AAAKiB,AAAc,AAAMC;AAGzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAMMF","names":["app.db/chart","app.db/sym-chart","cljs.core.reduce","p__54814","vec__54816","cljs.core.nth","acc","k","v","cljs.core.match/backtrack","e54822","js/Error","e__34948__auto__","cljs.core.assoc","cljs.core/vec","cljs.core.map","cljs.core/keyword","app.db/ticker","js/Date","app.db/default_db"],"sourcesContent":["(ns app.db\n  (:require\n    [cljs.core.match :refer [match]]\n    [reagent.core :as r]))\n\n\n(def chart\n  {\" \" [\"wordspace\"]\n   \"A\" [\".\" \"-\"]\n   \"B\" [\"-\" \".\" \".\" \".\"]\n   \"C\" [\"-\" \".\" \"-\" \".\"]\n   \"D\" [\"-\" \".\" \".\"]\n   \"E\" [\".\"]\n   \"F\" [\".\" \".\" \"-\" \".\"]\n   \"G\" [\"-\" \"-\" \".\"]\n   \"H\" [\".\" \".\" \".\" \".\"]\n   \"I\" [\".\" \".\"]\n   \"J\" [\".\" \"-\" \"-\" \"-\"]\n   \"K\" [\"-\" \".\" \"-\"]\n   \"L\" [\".\" \"-\" \".\" \".\"]\n   \"M\" [\"-\" \"-\"]\n   \"N\" [\"-\" \".\"]\n   \"O\" [\"-\" \"-\" \"-\"]\n   \"P\" [\".\" \"-\" \"-\" \".\"]\n   \"Q\" [\"-\" \"-\" \".\" \"-\"]\n   \"R\" [\".\" \"-\" \".\"]\n   \"S\" [\".\" \".\" \".\"]\n   \"T\" [\"-\"]\n   \"U\" [\".\" \".\" \"-\"]\n   \"V\" [\".\" \".\" \".\" \"-\"]\n   \"W\" [\".\" \"-\" \"-\"]\n   \"X\" [\"-\" \".\" \".\" \"-\"]\n   \"Y\" [\"-\" \".\" \"-\" \"-\"]\n   \"Z\" [\"-\" \"-\" \".\" \".\"]\n  })\n\n; @TODO deprecated! Remove when safe.\n(def sym-chart\n  (reduce\n    (fn [acc [k v]]\n      (match k\n             \" \" (assoc acc k [:space])\n             :else (assoc acc k (vec (map keyword v)))))\n    {}\n    chart))\n\n(def ticker {:time (.now js/Date)\n             :count 0})\n\n(def default_db \n  {:log []\n   :unit 200\n   :score 0\n   :challenge {:text \"\" :curr-code [] :state :waiting :index 0}\n   :input-text \"\"\n   :ticker ticker})\n"]}