{"version":3,"sources":["app/component/bar.cljs"],"mappings":"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","names":["app.component.bar/unit-width","app.component.bar/add-slice","cljs.core/deref","re_frame.core.subscribe","args__32954__auto__","ocr-34888","cljs.core/vec","cljs.core/vector?","cljs.core/count","ocr-34888_1__34891","cljs.core.nth","cljs.core.match/backtrack","e34893","js/Error","e__31919__auto__","e34894","e34895","e34896","e34892","app.component.bar/get-unit","i","p__34897","map__34898","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.component.bar/get-plain","ch","unit-width","margin","cljs.core._EQ_","p__34900","map__34901","app.component.bar/code-bar","code","id","attr","cljs.core.assoc","cljs.core.map_indexed","p__34903","map__34904","app.component.bar/plain-bar","counted-plain","app.helpers.parse/code->counted-plain","cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__34906","cljs.core/map?","app.component.bar/morse-code-bar","opts","cljs.spec.alpha.valid_QMARK_","map__34909","hide-plain?","hide-code?","hide-log-plain?","hide-log-code?","code-hidden?","plain-hidden?","num-bars","p1__34908#","p2__34907#","cljs.core.reduce","cljs.core/not","bar-height","outer-attrs"],"sourcesContent":["(ns app.component.bar\n  (:require\n    [cljs.spec.alpha :as s]\n    ;[app.helpers.interop :refer [get-node]]\n    [re-frame.core :refer [dispatch subscribe]]\n    ;[app.helpers.parser :refer [morse-text->flat-morse-text]]\n    [app.helpers.parse :refer [code->counted-plain] :as p]\n    [garden.core :refer [css]]\n    [defun.core :refer [fun defun]]\n    [cljs.core.match :refer [match]]\n  ))\n\n(def unit-width 1)\n\n(defn add-slice []\n  (str \"translateX(\" (* -1 @(subscribe [:log-size])) \"rem)\"))\n\n(defun get-unit \n  ([i \".\"]\n    [:div.morse-code-bar.-unit.-dot {:key i}\n      [:div.-content]])\n  ([i \"-\"]\n    [:div.morse-code-bar.-unit.-dash {:key i} \n      [:div.-content]])\n  ([i \"charspace\"]\n    [:div.morse-code-bar.-unit.-charspace {:key i} \n      [:div.-content]])\n  ([i \"wordspace\"]\n    [:div.morse-code-bar.-unit.-wordspace {:key i}\n      [:div.-content]]))\n\n\n(defn get-plain [i {ch :char unit-width :count margin :num-syms}]\n  [:div.morse-code-bar.-plain {:key i}\n    (cond \n      (= \" \" ch) [:div.-wordspace [:div.-content]]\n      :else [:<> [:div.-letter    {:style {:margin-right margin\n                                           :width (str unit-width \"rem\")}}\n                   [:div.-content ch]]\n                 [:div.-charspace [:div.-content]]])])\n\n\n(defn code-bar [code {id :id}]\n  (let [\n    attr {:style {:transform (add-slice)\n          :transition-duration \"200ms\"}}\n    attr (if id (assoc attr :id id) attr)]\n  [:div.morse-code-bar.-inner attr\n    (map-indexed get-unit code)]))\n\n\n(defn plain-bar [code {}]\n  (let [counted-plain (code->counted-plain code)]\n    [:div.morse-code-bar.-inner\n      {:style {:transform (add-slice)\n               :transition-duration \"200ms\"}}\n      (map-indexed\n        get-plain\n        counted-plain)]))\n\n\n(s/def ::bar-opts (s/keys :opt-un [\n                                   ::hide-plain? \n                                   ::hide-code?]))\n(defn morse-code-bar [code opts]\n  {:pre [(s/valid? ::p/morse-code code) \n         (s/valid? ::bar-opts opts)]}\n  (let [{:keys [hide-plain? hide-code? id\n                hide-log-plain? hide-log-code?] \n         ;:or   {hide-plain? false hide-code? false}\n         } opts\n        code-hidden? (if id hide-log-code? hide-code?)\n        plain-hidden? (if id hide-log-plain? hide-plain?)\n        num-bars (reduce\n                   #(if-not %2 (inc %1) %1)\n                   0\n                   [hide-code? hide-plain?])\n        bar-height (str (* 3 num-bars) \"rem\")\n\n        outer-attrs {:style {:height bar-height}}]\n\n  [:div.morse-code-bar.-outer outer-attrs\n    (if-not plain-hidden? [plain-bar code opts])\n    (if-not code-hidden?  [code-bar code opts])]))\n"]}