{"version":3,"sources":["app/reg/events/tick.cljs"],"mappings":";AAMA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAAA,AAAA,AACS,AAAMC;;AAIf,AAAA,AAAAC,AAAMM;AAAN,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAoBM;AAApB,AAAA,AAAA,AAAA,AACU,AAAA,AAAKA,AACN,AAAMR;;AAGf,AAAA,AAACS,AAEC,AACGC,AAAKC;AADR,AAAA;AAKE,AAAMC,AAAY,AAAA,AAAA,AAAA,AAACC,AAAOH;AACpBI,AAAO,AAACP,AAAYK;AACpBG,AAAQ,AAAA,AAAKL;AACbM,AAAG,AAAA,AAACC,AAAMF,AAAgBD;AAHhC,AAAA,AAAA,AAKOE;;AAGX,AAAA,AAACP,AAEC,AACGC,AAAKC;AADR,AAEE,AAAMG,AAAO,AAACf;AACRiB,AAAO,AAAA,AAAKN,AACL,AAAA,AAACO,AAAcH,AACf,AAAA,AAAA,AAAA,AAAA,AAACI;AAHd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIKF,AAGoB,AAAA,AAAA,AAAA,AAACH,AAAOH;;AAGrC,AAAA,AAACD,AAEC,AACGC,AAAKC;AADR,AAAA,AAAA,AAAA,AAAA,AAAA","names":["app.reg.events.tick/blank-ticker","js/Date","p__56748","map__56749","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","app.reg.events.tick/next-ticker","c","re_frame.core.reg_event_fx","cofx","_","prev-ticker","cljs.core.get_in","ticker","prev-db","db","cljs.core.assoc","cljs.core/assoc-in"],"sourcesContent":["(ns app.reg.events.tick\n  (:require\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-fx reg-event-db]]))\n\n\n(defn blank-ticker []\n  {:time (.now js/Date)\n   :count 0})\n\n\n(defn next-ticker [{c :count}]\n  {:count (inc c)\n   :time (.now js/Date)})\n\n\n(reg-event-fx\n  :tick\n  (fn-traced \n    [cofx _]\n    \"So it turns out you don't really have to do much here.\n     As long as the db is refreshing at a regular interval,\n       the predictive text will work.\"\n    (let [prev-ticker (get-in cofx [:db :ticker])\n          ticker (next-ticker prev-ticker)\n          prev-db (:db cofx)\n          db (assoc prev-db :ticker ticker)]\n\n      {:db db})))\n\n\n(reg-event-fx\n  :start-ticker\n  (fn-traced \n    [cofx _]\n    (let [ticker (blank-ticker)\n          db (-> (:db cofx)\n                 (assoc :ticker ticker)\n                 (assoc-in [:challenge :state] :running))]\n    {:db db\n     :dispatch-interval {:dispatch [:tick]\n                         :id :ticker\n                         :ms (get-in cofx [:db :unit])}})))\n\n\n(reg-event-fx\n  :stop-ticker\n  (fn-traced \n    [cofx _]\n    {:clear-interval {:id :ticker}}))\n"]}