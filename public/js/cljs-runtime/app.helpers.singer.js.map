{"version":3,"sources":["app/helpers/singer.cljs"],"mappings":"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","names":["app.helpers.singer/full-notes","notes","cljs.core.get","cljs.core.reduce","p__50669","p__50670","map__50672","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","vec__50673","cljs.core.nth","start","dur","t","cljs.core.conj","app.helpers.singer/make-notes","flat-morse-text","acc","cljs.core.match/backtrack","e50697","js/Error","e__34553__auto__","e50704","e50705","app.helpers.singer/flatten-morse-text","morse-text","char-vec","cljs.core.concat","app.helpers.singer/sing-notes","unit","seq__50712","cljs.core/seq","chunk__50713","count__50714","i__50715","vec__50765","temp__5735__auto__","cljs.core/chunked-seq?","c__4556__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","cljs.core/count","vec__50776","cljs.core/first","cljs.core/next","typ","cljs.core/keyword-identical?","e50775","e50772","e50774","e50773","e50786","e50783","e50785","e50784","js/window"],"sourcesContent":["(ns app.helpers.singer\n  (:require\n    [cljs.core.match :refer [match]]\n  ))\n\n\n(defn full-notes [notes]\n  \"Remove duplicate rests, add persistant time\n  [1 :play] [1 :rest] [2 :rest]\n  => [{:t :play :d 1 :start 0}\n      {:t :rest :d 3 :start 1}]\"\n  (get\n    (reduce\n      (fn [{:keys [start notes]} [dur t]]\n          {:start (+ start dur)\n           :notes (conj notes [dur t start])})\n      {:start 0 :notes []}\n      notes)\n    :notes))\n\n\n(defn make-notes [flat-morse-text]\n  (reduce\n    (fn [acc t]\n      (match t\n             \".\" (-> acc (conj [1 :play] [1 :rest]))\n             \"-\" (-> acc (conj [3 :play] [1 :rest]))\n             \" \" (-> acc (conj [2 :rest]))))\n    []\n    flat-morse-text))\n\n\n(defn flatten-morse-text [morse-text]\n  (reduce \n    (fn [acc char-vec]\n      (-> acc\n        (concat char-vec)\n        (concat [\" \"])))\n    []\n    morse-text))\n\n\n(defn sing-notes\n  [unit morse-text]\n  (let [notes (-> morse-text\n                  flatten-morse-text\n                  make-notes\n                  full-notes)]\n  (doseq [[dur typ start] notes]\n    (match [dur typ]\n           [1 :play] (.play_dit js/window start unit)\n           [3 :play] (.play_dah js/window start unit)\n           [_ _]     :noop))))\n"]}