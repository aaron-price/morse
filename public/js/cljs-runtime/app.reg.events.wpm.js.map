{"version":3,"sources":["app/reg/events/wpm.cljs"],"mappings":";AAOA,AAAKA,AAAc,AAAA,AAAA;AACnB,AAAA,AAAKC;AAOL,AAAA,AAAMC,AAAaC;AAAnB,AACE,AAAMC,AAAS,AAAGD,AAAYF;AACxBI,AAAiB,AAAGL,AAAcI;AAClCE,AAAI,AAACC,AAAWF;AAFtB,AAGEC;;AAEJ,AAAA,AAAME,AAASF;AAAf,AACE,AACEN,AACA,AAAGM,AAAIL;;AAEX,AAAA,AAAMQ,AAASC;AAAf,AACE,AAAA,AAAA,AAAA,AAAA,AAAIA,AACAR,AAEAM,AACAD;;AAGN,AAAA,AAAMI,AAASD;AAAf,AACE,AAAA,AAAA,AAAA,AAAA,AAAIA,AACAR,AAEAM,AACAD;;AAEN,AAAA,AAACK,AAEC,AAAAC,AAAqBO;AAArB,AAAA,AAAAN,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAaK;AAAb,AAAA,AAAA,AACO,AAAA,AAACE,AAAOF,AAASR;;AAE1B,AAAA,AAACC,AAEC,AAAAU,AAAqBF;AAArB,AAAA,AAAAG,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAR,AAAA,AAAAQ,AAAA,AAAA,AAAA,AAAA,AAAAP,AAAAC,AAAAM,AAAAA;AAAA,AAAAL,AAAAK,AAAA,AAAaJ;AAAb,AAAA,AAAA,AACO,AAAA,AAACE,AAAOF,AAASV","names":["app.reg.events.wpm/ms-per-minute","app.reg.events.wpm/units-per-word","app.reg.events.wpm/current-wpm","ms-per-unit","word-dur","words-per-minute","wpm","Math/round","app.reg.events.wpm/wpm->ms","app.reg.events.wpm/inc-wpm","unit-dur","app.reg.events.wpm/dec-wpm","re_frame.core.reg_event_fx","p__38018","map__38019","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","db","_","cljs.core.update","p__38021","map__38022"],"sourcesContent":["(ns app.reg.events.wpm\n  (:require\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-fx]]))\n\n; re-frame db :unit measures ms-per-unit.\n\n(def ms-per-minute (* 60 1000)) ;60,000\n(def units-per-word 50)\n\n; 60000 / 50 = 1200 therefore: \n; if 1wpm, then 1200 ms per unit.\n; if 2wpm, then  600 ms per unit\n;\n\n(defn current-wpm [ms-per-unit]\n  (let [word-dur (* ms-per-unit units-per-word)\n        words-per-minute (/ ms-per-minute word-dur)\n        wpm (Math/round words-per-minute)]\n    wpm))\n\n(defn wpm->ms [wpm]\n  (/\n    ms-per-minute\n    (* wpm units-per-word)))\n\n(defn inc-wpm [unit-dur]\n  (-> unit-dur\n      current-wpm\n      inc\n      wpm->ms\n      Math/round))\n\n\n(defn dec-wpm [unit-dur]\n  (-> unit-dur\n      current-wpm\n      dec\n      wpm->ms\n      Math/round))\n\n(reg-event-fx \n  :dec-wpm\n  (fn-traced [{db :db} _]\n    {:db (update db :unit dec-wpm)}))\n\n(reg-event-fx \n  :inc-wpm\n  (fn-traced [{db :db} _]\n    {:db (update db :unit inc-wpm)}))\n\n\n\n"]}