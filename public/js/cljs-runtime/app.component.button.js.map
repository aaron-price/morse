{"version":3,"sources":["app/component/button.cljs"],"mappings":";AAMA,AAAA,AAAMA,AAAcC;AAApB,AACE,AACE,AAAA,AAACC,AAAED;AAAK,AAAA,AAAA,AAACE;;AADX,AAEE,AAAA,AAACD,AAAED;AAAK,AAAA,AAAA,AAACE;;AAFX;;;;AAKF,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD;AAAA,AAOgB,AAACJ,AAAa,AAAA,AAAA,AAAAI,AAAA;;;AAI9B,AAAA,AAAME;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGwB,AAAKC;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAA,AAACJ;AAL3B,AAMwB,AAAKI;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAA,AAACJ;;;AAG3B,AAAA,AAAMK;AAAN,AAAA,AAAA,AAAA,AAAA,AAC2B,AAAKD;AAAL,AACE,AAAiBA;;AACjB,AAAA,AAAA,AAACJ;AAH9B;;AAKA,AAAA,AAAMM;AAAN,AACE,AAAAC,AAAA,AAAAC,AAAQ,AAAA,AAAA,AAACO;AAAT,AAAA,AAAA,AAAA,AAAA,AAAAN,AAAAF,AAAA;AAAA,AACgBL;;AADhB,AAAA,AAAAQ;;;AAAA,AAAA,AAAAC,AAAAC;AAAA,AAAAC,AAAAF;AAAA,AAAA,AAAA,AAAAE,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAA,AAAAD,AAAAF,AAAA;AAAA,AAEgBJ;;AAFhB,AAAA,AAAAO;;;AAAA,AAAA,AAAAI,AAAAF;AAAA,AAAAC,AAAAC;AAAA,AAAA,AAAA,AAAAD,AAAAH;AAAA,AAAA,AAAA,AAAAE,AAAA,AAAA,AAAAL;;AAAA,AAAAM;;;AAAA,AAAA,AAAAC;;;;AAAA,AAAAD;;;AAAA,AAAA,AAAAF","names":["app.component.button/handle-slide","v","cljs.core._EQ_","re-frame.core/dispatch","p1__34847#","app.component.button/slider-btn","app.component.button/default-btn","e","app.component.button/reset-log","app.component.button/render-btn","ocr-34848","cljs.core/deref","cljs.core/keyword-identical?","cljs.core.match/backtrack","e34850","js/Error","e__31919__auto__","e34851","re_frame.core.subscribe"],"sourcesContent":["(ns app.component.button\n  (:require ;[\"tone\" :as tone]\n    [cljs.core.match :refer [match]]\n    [re-frame.core :refer [dispatch subscribe]]\n  ))\n\n(defn handle-slide [v]\n  (cond \n    (= v 0) (dispatch [:tap-down])\n    (= v 1) (dispatch [:tap-up])))\n\n\n(defn slider-btn []\n  [:div.rangeslider-wrap\n    [:input {:type \"range\"\n             :min \"0\"\n             :max \"1\"\n             :step \"1\"\n             :on-change \n               #(handle-slide (-> % .-target .-value int))\n            }]])\n\n\n(defn default-btn []\n  [:div.button-parent \"Tap Below\"\n    [:div#btn.basic \n      {:on-pointer-down (fn [e]\n                          (.preventDefault e)\n                          (dispatch [:tap-down]))\n       :on-pointer-up   (fn [e]\n                          (.preventDefault e)\n                          (dispatch [:tap-up]))} \n     ]])\n\n(defn reset-log []\n  [:button {:on-pointer-up (fn [e]\n                             (.preventDefault e)\n                             (dispatch [:reset-log]))} \"Reset\"])\n\n(defn render-btn []\n  (match @(subscribe [:btn-type])\n         :slider [slider-btn]\n         :click  [default-btn]))\n"]}