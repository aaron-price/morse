{"version":3,"sources":["app/helpers/interval_fx.cljs"],"mappings":";AAKA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAkBC;AAClB,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAYE;AACZ,AAAAF,AAAA,AAAA,AAAA,AAAA,AAAYG;AACZ,AAAAH,AAAA,AAAA,AAAA,AAAA,AAAgC,AAAAI,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAAA;AAAA,AAAA,AAAA,AAAAC,AAAAD,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA,AAAA,AAAAE,AAAAF,AAAA;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;AAEhC,AAAKG,AAAgB,AAAA,AAACC;AAEtB,AAAA,AAACC,AAEC,AAAAC;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAoCQ;AAApCJ,AAAA,AAAAC,AAAAL,AAAA;AAAAM,AAAA,AAAAD,AAAAL,AAAA;AAAAO,AAAA,AAAAF,AAAAL,AAAA;AAAA,AACE,AAAAS;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAA,AAAA;AAAA,AAAAC,AAAA,AAAmCJ;;AAAAA;;AAAAA;;AACnC,AAAMK,AAAY,AAAA,AAACC;AAAD,AAAiB,AAACC,AAAkBX;AAAUE;AAAhE,AACE,AAACU,AAAMpB,AAAgBqB,AAAMV,AAAGM;;AAEtC,AAAA,AAACf,AAEC,AAAAoB;AAAA,AAAA,AAAAC,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAAZ,AAAA,AAAAF,AAAAc,AAAA;AAAA,AACE,AAAAC,AAAuB,AAAA,AAAAV,AAACL,AAAKT,AAAgBW;AAA7C,AAAA,AAAAa;AAAA,AAAA,AAAAA,AAAWP;AAAX,AACE,AAACQ,AAAiBR;;AAClB,AAACG,AAAMpB,AAAgB0B,AAAOf;;AAFhC","names":["cljs.spec.alpha/def-impl","cljs.core/sequential?","cljs.core/int?","cljs.core/any?","cljs.spec.alpha/map-spec-impl","G__36751","cljs.core/map?","cljs.core/contains?","app.helpers.interval-fx/registered-keys","cljs.core.atom","re-frame.core/reg-fx","p__36752","map__36753","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","dispatch","cljs.core.get","ms","id","config","cljs.spec.alpha/*compile-asserts*","cljs.core/deref","cljs.spec.alpha/*runtime-asserts*","cljs.spec.alpha/assert*","interval-id","js/setInterval","re-frame.core/dispatch","cljs.core.swap_BANG_","cljs.core/assoc","p__36755","map__36756","temp__5735__auto__","js/clearInterval","cljs.core/dissoc"],"sourcesContent":["(ns app.helpers.interval-fx\n  (:require\n    [cljs.spec.alpha :as s]\n    [re-frame.core :as re-frame :refer [reg-fx]]))\n\n(s/def ::dispatch sequential?)\n(s/def ::ms int?)\n(s/def ::id any?)\n(s/def ::dispatch-interval-args (s/keys :req-un [::dispatch ::ms ::id]))\n\n(def registered-keys (atom nil))\n\n(reg-fx\n  :dispatch-interval\n  (fn [{:keys [:dispatch :ms :id] :as config}]\n    (s/assert ::dispatch-interval-args config)\n    (let [interval-id (js/setInterval #(re-frame/dispatch dispatch) ms)]\n      (swap! registered-keys assoc id interval-id))))\n\n(reg-fx\n  :clear-interval\n  (fn [{:keys [:id]}]\n    (when-let [interval-id (get @registered-keys id)]\n      (js/clearInterval interval-id)\n      (swap! registered-keys dissoc id))))\n"]}