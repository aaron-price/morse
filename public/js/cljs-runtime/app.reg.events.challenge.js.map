{"version":3,"sources":["app/reg/events/challenge.cljs"],"mappings":"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","names":["cljs.spec.alpha/def-impl","cljs.spec.alpha/map-spec-impl","G__35041","cljs.core/map?","G__35042","cljs.core/contains?","G__35043","cljs.core/integer?","cljs.spec.alpha.every_impl","G__35044","cljs.core/coll?","G__35045","app.reg.events.challenge/empty-db-challenge","js/Error","%","app.reg.events.challenge/normalize-specs","specs","cljs.spec.alpha.valid_QMARK_","cljs.core.reduce","p__35046","map__35047","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","acc","plain","code","hide-plain?","hide-code?","hide-log-plain?","hide-log-code?","note","wpm","spec","app.helpers.parse/code->plain","app.helpers.parse/plain->code","new-spec","cljs.core.conj","app.reg.events.challenge/create-db-challenge","cljs.core.merge","cljs.core/first","app.reg.events.challenge/done-challenge","db-challenge","app.reg.events.challenge/finish-challenges","app.reg.events.challenge/inc-challenges","app.reg.events.challenge/next-challenge","old-challenge","map__35049","state","challenge-specs","index","num-specs","cljs.core/count","done?","cljs.core._EQ_","idx","x__4217__auto__","y__4218__auto__","cljs.core.nth","curr","app.reg.events.challenge/challenge-complete?","log-code","cljs.core/boolean?","map__35051","curr-code","cljs.core.not_EQ_","app.reg.events.challenge/challenge-failed?","map__35053","sub-chal","cljs.core.take","re_frame.core.reg_event_db","p__35055","vec__35056","db","_","cljs.core.assoc","re_frame.core.reg_event_fx","cofx","map__35059","challenge","next-c","p__35061","vec__35062","cljs.core/assoc-in","cljs.core.get_in","unit","app.helpers.parse/parse-log","complete?","fail?"],"sourcesContent":["(ns app.reg.events.challenge\n  (:require\n    [cljs.spec.alpha :as s]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-fx reg-event-db]]\n    [app.helpers.parse :as p]\n  ))\n\n(s/def ::state #{:waiting :running :completed :failed})\n\n(s/def ::abnormal-challenge-spec (s/keys :opt-un [::plain ::code \n                                                  ::hide-plain? ::hide-code? \n                                                  ::hide-log-plain?\n                                                  ::hide-log-code?\n                                                  ::note ::wpm]))\n(s/def ::challenge-spec (s/keys :opt-un [::wpm]\n                                :req-un [::plain ::code \n                                         ::hide-plain? ::hide-code? \n                                         ::hide-log-plain?\n                                         ::hide-log-code?\n                                         ::note ::wpm]))\n\n(s/def ::db-challenge (s/keys :req-un [::index ::state ::challenge-specs ::curr-code]))\n\n(s/def ::index integer?)\n(s/def ::challenge-specs (s/coll-of ::challenge-spec))\n(s/def ::abnormal-challenge-specs (s/coll-of ::abnormal-challenge-spec))\n(s/def ::curr-code ::p/morse-code)\n(def empty-db-challenge {:index 0 :state :waiting :challenge-specs [] :curr-code []})\n\n\n(defn normalize-specs [specs]\n  {:pre [(s/valid? ::abnormal-challenge-specs specs)]\n   :post [(s/valid? ::challenge-specs %)]}\n\n  (reduce\n    (fn [acc {:keys [plain code hide-plain? hide-code? \n                     hide-log-plain? hide-log-code? note wpm] \n              :or {hide-plain? false hide-code? false \n                   hide-log-plain? false hide-code-plain? false\n                   note \"\"}\n              :as spec}]\n      (let [\n        plain (if plain plain (p/code->plain code))\n        code (if code code (p/plain->code plain))\n        new-spec {:plain plain\n                  :code code\n                  :wpm wpm\n                  :note note\n                  :hide-plain? hide-plain?\n                  :hide-code? hide-code?\n                  :hide-log-plain? hide-log-plain?\n                  :hide-log-code?  hide-log-code?\n                  }\n      ] (conj acc new-spec)))\n    []\n    specs))\n\n\n(defn create-db-challenge [specs]\n  {:pre [(s/valid? ::challenge-specs specs)]\n   :post [(s/valid? ::db-challenge %)]}\n\n  (let [specs (normalize-specs specs)]\n    (merge \n      empty-db-challenge \n      {:challenge-specs specs\n       :curr-code (get (first specs) :code)})))\n\n(defn done-challenge [db-challenge]\n  {:pre [(s/valid? ::db-challenge db-challenge)]\n   :post [(s/valid? ::db-challenge %)]}\n  \n  {})\n\n\n(defn finish-challenges [])\n(defn inc-challenges [])\n\n(defn next-challenge [old-challenge]\n  {:pre [(s/valid? ::db-challenge old-challenge)]\n   :post [(s/valid? ::db-challenge %)]}\n\n  (let [{:keys [state challenge-specs index]} old-challenge \n        num-specs (count challenge-specs)\n        done? (= (inc index) num-specs)\n        idx (min (inc index) (dec num-specs))\n        spec (if done? {:code []} (nth challenge-specs idx))\n        curr (:code spec)\n        state (if done? :completed state)]\n\n    (merge old-challenge {:index idx \n                          :state state\n                          :curr-code curr})))\n\n\n(defn challenge-complete? [db-challenge log-code]\n  {:pre [(s/valid? ::db-challenge db-challenge)\n         (s/valid? ::p/morse-code log-code)]\n   :post [(s/valid? boolean? %)]}\n\n  (let [{:keys [state curr-code]} db-challenge]\n    (cond\n      (not= state :running) false\n      :else (= log-code curr-code))))\n\n\n; WARNING! Do not pass in predictive code here. It WILL fail.\n(defn challenge-failed? [db-challenge log-code]\n  {:pre [(s/valid? ::db-challenge db-challenge)\n         (s/valid? ::p/morse-code log-code)]\n   :post [(s/valid? boolean? %)]}\n\n  (let [{:keys [state curr-code]} db-challenge\n        sub-chal (take (count log-code) curr-code)]\n    (cond\n      (not= state :running) false\n      :else (not= log-code sub-chal))))\n\n\n(reg-event-db\n  :init-challenges\n  (fn-traced\n    [db [_ challenge-specs]]\n    (let [specs (normalize-specs challenge-specs)\n          db-challenge (create-db-challenge specs)]\n      (assoc db :challenge db-challenge))))\n\n\n(reg-event-fx\n  :next-challenge\n  (fn-traced\n    [cofx _]\n    (let [db (:db cofx)\n          {:keys [index challenge-specs] :as challenge} (:challenge db)\n          next-c (next-challenge challenge)]\n    {:db (assoc db :challenge next-c)})))\n\n\n(reg-event-db\n  :set-challenge-state\n  (fn-traced\n    [db [_ state]]\n    (assoc-in db [:challenge :state] state)))\n\n\n(reg-event-fx\n  :check-work\n  (fn-traced\n    [cofx _]\n    (let [db-challenge (get-in cofx [:db :challenge])\n          unit         (get-in cofx [:db :unit])\n          log-code     (p/parse-log unit (get-in cofx [:db :log]))\n          complete?    (challenge-complete? db-challenge log-code)\n          fail?        (challenge-failed? db-challenge log-code)]\n      (cond\n        complete? {:fx [[:dispatch [:reset-log]]\n                        [:dispatch [:stop-ticker]]\n                        [:dispatch [:next-challenge]]]}\n        fail?     {:fx [[:dispatch [:stop-ticker]]\n                        [:dispatch [:set-challenge-state :failed]]]}\n        :else     {}))))\n\n(reg-event-fx\n  :reset-challenge\n  (fn-traced\n    [cofx _]\n    {:fx [[:dispatch [:reset-log]]\n          [:dispatch [:set-challenge-state :waiting]]]}))\n"]}